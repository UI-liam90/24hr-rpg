---
import dayjs from 'dayjs';
import { Picture } from "astro-imagetools/components";
import Btn from "../components/Btn.astro";
    export interface Props {
        eventDate?: string;
        charityLogo?: string;
        charityName?: string;
        link?: string;
    }

const { eventDate, charityLogo, charityName, link } = Astro.props as Props;

const the_date = dayjs(eventDate);
const timer_date = dayjs(the_date).format('YYYY-MM-DD');
const the_date_formated = dayjs(the_date).format('DD, MMMM YYYY');

const {default: logosvg} = await import(`../images/index.svg?raw`);
---

<section class="hero hero--home">
    <div class="hex-field">
        <div class="hex-field__hexagon hex-field__hexagon--type-a">
            <svg class="icon icon-hexagonal"><use xlink:href="#icon-hexagonal"></use></svg>
        </div>
        <div class="hex-field__hexagon hex-field__hexagon--type-b">
            <svg class="icon icon-hexagonal"><use xlink:href="#icon-hexagonal"></use></svg>
        </div>
        <div class="hex-field__hexagon hex-field__hexagon--type-c">
            <svg class="icon icon-hexagonal"><use xlink:href="#icon-hexagonal"></use></svg>
        </div>
        <div class="hex-field__hexagon hex-field__hexagon--type-d">
            <svg class="icon icon-hexagonal"><use xlink:href="#icon-hexagonal"></use></svg>
        </div>
        <div class="hex-field__hexagon hex-field__hexagon--type-e">
            <svg class="icon icon-hexagonal"><use xlink:href="#icon-hexagonal"></use></svg>
        </div>
        <div class="hex-field__hexagon hex-field__hexagon--type-f">
            <svg class="icon icon-hexagonal"><use xlink:href="#icon-hexagonal"></use></svg>
        </div>
        <div class="hex-field__hexagon hex-field__hexagon--type-g">
            <svg class="icon icon-hexagonal"><use xlink:href="#icon-hexagonal"></use></svg>
        </div>
        <div class="hex-field__hexagon hex-field__hexagon--type-h">
            <svg class="icon icon-hexagonal"><use xlink:href="#icon-hexagonal"></use></svg>
        </div>
        <div class="hex-field__hexagon hex-field__hexagon--type-i">
            <svg class="icon icon-hexagonal"><use xlink:href="#icon-hexagonal"></use></svg>
        </div>
        <div class="hex-field__hexagon hex-field__hexagon--type-j">
            <svg class="icon icon-hexagonal"><use xlink:href="#icon-hexagonal"></use></svg>
        </div>
        <div class="hex-field__hexagon hex-field__hexagon--type-k">
            <svg class="icon icon-hexagonal"><use xlink:href="#icon-hexagonal"></use></svg>
        </div>
        <div class="hex-field__hexagon hex-field__hexagon--type-l">
            <svg class="icon icon-hexagonal"><use xlink:href="#icon-hexagonal"></use></svg>
        </div>
        <div class="hex-field__hexagon hex-field__hexagon--type-m">
            <svg class="icon icon-hexagonal"><use xlink:href="#icon-hexagonal"></use></svg>
        </div>
        <div class="hex-field__hexagon hex-field__hexagon--type-n">
            <svg class="icon icon-hexagonal"><use xlink:href="#icon-hexagonal"></use></svg>
        </div>
        <div class="hex-field__hexagon hex-field__hexagon--type-p">
            <svg class="icon icon-hexagonal"><use xlink:href="#icon-hexagonal"></use></svg>
        </div>
        <div class="hex-field__hexagon hex-field__hexagon--type-q">
            <svg class="icon icon-hexagonal"><use xlink:href="#icon-hexagonal"></use></svg>
        </div>
        <div class="hex-field__hexagon hex-field__hexagon--type-o">
            <svg class="icon icon-hexagonal"><use xlink:href="#icon-hexagonal"></use></svg>
        </div>
        <div class="hex-field__hexagon hex-field__hexagon--type-r">
            <svg class="icon icon-hexagonal"><use xlink:href="#icon-hexagonal"></use></svg>
        </div>
        <div class="hex-field__hexagon hex-field__hexagon--type-s">
            <svg class="icon icon-hexagonal"><use xlink:href="#icon-hexagonal"></use></svg>
        </div>
        <div class="hex-field__hexagon hex-field__hexagon--type-t">
            <svg class="icon icon-hexagonal"><use xlink:href="#icon-hexagonal"></use></svg>
        </div>
    </div>
    <div class="hero-overlay">
        <div class="site-logo">
            <Fragment set:html={logosvg} />
        </div>
        <h2 class="event_date">{the_date_formated}</h2>
        <div id="clockdiv" class="countdown-timer" data-date={timer_date}>
            <div>
                <span class="days countdown-timer__unit"></span>
                <div class="smalltext">Days</div>
            </div>
            <div>
                <span class="hours countdown-timer__unit"></span>
                <div class="smalltext">Hours</div>
            </div>
            <div>
                <span class="minutes countdown-timer__unit"></span>
                <div class="smalltext">Minutes</div>
            </div>
            <div>
                <span class="seconds countdown-timer__unit"></span>
                <div class="smalltext">Seconds</div>
            </div>
        </div>
        <div class="charity">
            <h2>This year in support of:</h2>
            <div class="charity__image">
                <Picture src={charityLogo} alt={charityName} />
            </div>
            <Btn text="Donate" type="secondary" link={link} target="_BLANK" />
        </div>
    </div>
</section>

<style>
    .hero.hero--home {
        position: relative;
        background-color: var(--black);
        overflow: hidden;
    }
    .hex-field__hexagon {
        transform: rotate(30deg);
    }
    .hex-field__hexagon svg {
        --size: 10px;
        --speed: 2s;
        --delay: 0s;
        width: var(--size);
        height: var(--size);
        stroke: var(--canvas);
        fill: var(--canvas);
        filter: drop-shadow(0 0 calc(var(--size) / 2.5) var(--white));
	    animation: shadow-drop var(--speed) cubic-bezier(0.250, 0.460, 0.450, 0.940) var(--delay) infinite both, rotate-scale-up calc(var(--speed) * 1.5) linear var(--delay) infinite both;
    }
    .site-logo {
        --logo-svg-fill: var(--canvas);
        max-width: 500px;
        padding-bottom: 12px;
        margin: 0 auto;
        filter: drop-shadow(0 0 10px var(--white));
        margin-bottom: 32px;
    }
    .hero-overlay {
        position: relative;
        z-index: 10;
        display: flex;
        flex-flow: column nowrap;
        justify-content: center;
        align-items: center;
        padding: 30px 16px;
        min-width: 100vw;
        min-height: 100vh;
    }
    .charity {
        display: flex;
        flex-flow: column nowrap;
        align-items: center;
        justify-content: center;
        margin: 40px 0 12px;
        h2 {
            color: var(--canvas);
            text-align: center;
            font-size: var(--font-size-wolf);
            filter: drop-shadow(0 0 10px var(--white));
        }
        .charity__image {
            max-width: 300px;
            margin: 12px 0 32px;
        }
    }
    .event_date {
        color: var(--canvas);
        font-size: var(--font-size-elephant);
        filter: drop-shadow(0 0 10px var(--white));
        text-align: center;
    }
    .countdown-timer {
        color: var(--canvas);
        display: flex;
        > div {
            padding: 12px;
            display: flex;
            flex-flow: column nowrap;
            justify-content: center;
            align-items: center;
            filter: drop-shadow(0 0 10px var(--white));
        }
        .countdown-timer__unit {
            font-weight: 700;
            font-size: var(--font-size-lion);
        }
    }
    .hex-field {
        position: absolute;
        inset: 0;
        z-index: 5;
        min-width: 100vw;
        min-height: 100vh;
        display: grid;
        grid-template-columns: repeat(20, 1fr);
        grid-template-rows: repeat(20, 1fr);
        grid-template-areas: 
        "a . . . . . . . . . . . . . . . . . . . ."
        ". . . . . . . . . . . . . . . . . . . b ."
        ". . . . c . . . . . . . . . . . . . . . ."
        ". . . . . . . . d . . . . . . . . . . . ."
        ". . . . . . . . . . . . . . . e . . . . ."
        ". . f . . . . . . . . . . . . . . . . . ."
        ". . . . . . . . . . . . . . . . g . . . ."
        ". . . . . . . . . . h . . . . . . . . . ."
        ". . . . . . . . . . . . . . . . . . . . i"
        ". . . . . . . j . . . . . . . . . . . . ."
        ". . . . . . . . . . . . . k . . . . . . ."
        ". l . . . . . . . . . . . . . . . . . . ."
        ". . . . . . . . . . . . . . m . . . . . ."
        ". . . . . . . . . . . . n . . . . . . . ."
        ". . . . . . . . . . . . . . . . . o . . ."
        ". . . p . . . . . . . . . . . . . . . . ."
        ". . . . . . . . . q . . . . . . . . . . ."
        ". . . . . . . . . . . . . . . . . . r . ."
        ". . . . . . s . . . . . . . . . . . . . ."
        ". . . . . t . . . . . . . . . . . . . . .";
        justify-items: center;
        align-items: center;
    }
    .hex-field__hexagon--type-a {
        grid-area: a;
        svg {
            --size: 5px;
            --speed: 3s;
            --delay: 750ms;
        }
    }
    .hex-field__hexagon--type-b {
        grid-area: b;
        svg {
            --size: 12px;
            --speed: 5s;
            --delay: 250ms;
        }
    }
    .hex-field__hexagon--type-c {
        grid-area: c;
        svg {
            --size: 3px;
            --speed: 1.5s;
            --delay: 500ms;
        }
    }
    .hex-field__hexagon--type-d {
        grid-area: d;
        svg {
            --size: 7px;
            --speed: 4s;
            --delay: 100ms;
        }
    }
    .hex-field__hexagon--type-e {
        grid-area: e;
        svg {
            --size: 12px;
            --speed: 3.5s;
            --delay: 400ms;
        }
    }
    .hex-field__hexagon--type-f {
        grid-area: f;
        svg {
            --size: 6px;
            --speed: 2.5s;
            --delay: 800ms;
        }
    }
    .hex-field__hexagon--type-g {
        grid-area: g;
        svg {
            --size: 8px;
            --speed: 5s;
            --delay: 900ms;
        }
    }
    .hex-field__hexagon--type-h {
        grid-area: h;
        svg {
            --size: 2px;
            --speed: 1s;
            --delay: 50ms;
        }
    }
    .hex-field__hexagon--type-i {
        grid-area: i;
        svg {
            --size: 11px;
            --speed: 7s;
            --delay: 150ms;
        }
    }
    .hex-field__hexagon--type-j {
        grid-area: j;
        svg {
            --size: 5px;
            --speed: 5s;
            --delay: 500ms;
        }
    }
    .hex-field__hexagon--type-k {
        grid-area: k;
        svg {
            --size: 7px;
            --speed: 4.5s;
            --delay: 625ms;
        }
    }
    .hex-field__hexagon--type-l {
        grid-area: l;
        svg {
            --size: 4px;
            --speed: 5s;
            --delay: 450ms;
        }
    }
    .hex-field__hexagon--type-m {
        grid-area: m;
        svg {
            --size: 9px;
            --speed: 6s;
            --delay: 700ms;
        }
    }
    .hex-field__hexagon--type-n {
        grid-area: n;
        svg {
            --size: 10px;
            --speed: 10s;
            --delay: 200ms;
        }
    }
    .hex-field__hexagon--type-o {
        grid-area: o;
        svg {
            --size: 15px;
            --speed: 5s;
            --delay: 800ms;
        }
    }
    .hex-field__hexagon--type-p {
        grid-area: p;
        svg {
            --size: 13px;
            --speed: 2s;
            --delay: 500ms;
        }
    }
    .hex-field__hexagon--type-q {
        grid-area: q;
        svg {
            --size: 7px;
            --speed: 4s;
            --delay: 600ms;
        }
    }
    .hex-field__hexagon--type-r {
        grid-area: r;
        svg {
            --size: 4px;
            --speed: 8.5s;
            --delay: 450ms;
        }
    }
    .hex-field__hexagon--type-s {
        grid-area: s;
        svg {
            --size: 9px;
            --speed: 9s;
            --delay: 325ms;
        }
    }
    .hex-field__hexagon--type-t {
        grid-area: t;
        svg {
            --size: 6px;
            --speed: 12s;
            --delay: 100ms;
        }
    }


@keyframes shadow-drop {
  0% {
    filter: drop-shadow(0 0 calc(var(--size) / 2.5) var(--white));
  }
  100% {
    filter: drop-shadow(0 0 calc(var(--size) / 2) var(--white));
  }
}

@keyframes rotate-scale-up {
  0% {
        transform: scale(1) rotateZ(0);
  }
  50% {
        transform: scale(2) rotateZ(180deg);
  }
  100% {
        transform: scale(1) rotateZ(360deg);
  }
}


</style>

<script>
    let timer_date = document.querySelector('#clockdiv').dataset.date;

    function getTimeRemaining(endtime) {
        const total = Date.parse(endtime) - Date.parse(new Date());
        const seconds = Math.floor((total / 1000) % 60);
        const minutes = Math.floor((total / 1000 / 60) % 60);
        const hours = Math.floor((total / (1000 * 60 * 60)) % 24);
        const days = Math.floor(total / (1000 * 60 * 60 * 24));
        
        return {
            total,
            days,
            hours,
            minutes,
            seconds
        };
    }

    function initializeClock(id, endtime) {
    const clock = document.getElementById(id);
    const daysSpan = clock.querySelector('.days');
    const hoursSpan = clock.querySelector('.hours');
    const minutesSpan = clock.querySelector('.minutes');
    const secondsSpan = clock.querySelector('.seconds');

    function updateClock() {
        const t = getTimeRemaining(endtime);

        daysSpan.innerHTML = t.days;
        hoursSpan.innerHTML = ('0' + t.hours).slice(-2);
        minutesSpan.innerHTML = ('0' + t.minutes).slice(-2);
        secondsSpan.innerHTML = ('0' + t.seconds).slice(-2);

        if (t.total <= 0) {
            clearInterval(timeinterval);
        }
    }

    updateClock();
        const timeinterval = setInterval(updateClock, 1000);
    }

    const deadline = new Date(Date.parse(timer_date));
    initializeClock('clockdiv', deadline);


</script>